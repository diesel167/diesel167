{"version":3,"sources":["img/lumber1.jpg","img/lumber2.jpg","img/lumber3.jpg","Components/ChooseItem.js","Components/Choose.js","Components/Result.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChooseItem","item","setWorkwidth","setAllwidth","selected","selection","firstChoose","lumber","lumberName","name","refs","allwidth","workwidth","allrefs","setSelected","setFirstChoose","showParameters","a","ref","useRef","useClickAway","e","path","tagName","className","split","forEach","i","current","checked","type","placeholder","value","onChange","target","replace","htmlFor","id","onClick","src","alt","Choose","useState","Fragment","lumber1","lumber2","lumber3","Result","increasing","elements","area","length","setLength","plus5","setPlus5","Math","ceil","orderArea","toFixed","disabled","Footer","href","App","theme","setTheme","setArea","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c29f573f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lumber1.b45e9a51.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lumber2.fc06f138.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lumber3.68da841a.jpg\";","import React, {useRef} from \"react\";\r\nimport {useClickAway} from 'react-use';\r\n\r\nexport default function ChooseItem({setWorkwidth,\r\n                                     setAllwidth,\r\n                                     selected,\r\n                                     selection,\r\n                                     firstChoose,\r\n                                     lumber,\r\n                                     lumberName,\r\n                                     name,\r\n                                     refs,\r\n                                     allwidth,\r\n                                     workwidth,\r\n                                     allrefs,\r\n                                     setSelected,\r\n                                     setFirstChoose}) {\r\n\r\n\r\n  //handler for show/hide parameters for choosen lumber\r\n  let showParameters = (item, a) =>{\r\n    if(a==='not3rd' && selected==='lumber3'){\r\n      return ' hide';\r\n    }\r\n    return selected===item?' show':' hide';\r\n  };\r\n\r\n  let makeInactive = (item) => {\r\n    return selected!==item&&!firstChoose?' inactive':'';\r\n  };\r\n\r\n  //create reference for this component\r\n  const ref = useRef(null);\r\n\r\n  //click away component listener\r\n  useClickAway(ref, (e) => {\r\n    //check if the click not on inputs or switch theme\r\n    if(e.path[0].tagName!=='INPUT' &&\r\n        e.path[0].className.split(' ')[0]!=='slider' &&\r\n        e.path[0].className!=='also-input'){\r\n      //if click not on other lumbers\r\n        setSelected('');\r\n        setFirstChoose(true);\r\n        setWorkwidth(0);\r\n        setAllwidth(0);\r\n        //reset input radio to unchecked\r\n        allrefs.forEach((i)=>{\r\n          i.current.checked = false;\r\n        })\r\n      }\r\n  }, ['click']);\r\n\r\n  return <div ref={ref}  className={'img'+ makeInactive(lumberName)}>\r\n    <p className=\"name\">{name}</p>\r\n    <div className={'parameters allwidth' + showParameters(lumberName)}>\r\n      <p>Общая ширина:</p>\r\n      <input  type=\"text\"\r\n              placeholder='0'\r\n              value={allwidth}\r\n              onChange={(e)=>{\r\n                //console.log(+e.target.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1'));\r\n                setAllwidth(e.target.value.replace(/,/,'.'));\r\n                if(lumberName==='lumber3'){\r\n                  setWorkwidth(e.target.value.replace(/,/,'.'));\r\n                }\r\n              }}/>\r\n      <p className=\"mm\">мм</p>\r\n    </div>\r\n    <div className={'parameters workwidth' + showParameters(lumberName, 'not3rd')}>\r\n      <p>Рабочая ширина:</p>\r\n      <input  type=\"text\"\r\n              placeholder='0'\r\n              value={workwidth}\r\n              onChange={(e)=>setWorkwidth(e.target.value.replace(/,/,'.'))}/>\r\n      <p className=\"mm\">мм</p>\r\n    </div>\r\n    <label htmlFor={lumberName}\r\n           className='radio'>\r\n      <input type=\"radio\"\r\n             ref={refs}\r\n             id={lumberName}\r\n             name=\"choose\"\r\n             value={lumberName}\r\n             onClick={(e)=>selection(e)}/>\r\n      <div className=\"wrapper\">\r\n        <img src={lumber} className={lumberName+' lumber'} alt={lumberName}/>\r\n      </div>\r\n    </label>\r\n  </div>\r\n}","import React, { useState, useRef} from \"react\";\r\nimport lumber1 from \"../img/lumber1.jpg\";\r\nimport lumber2 from \"../img/lumber2.jpg\";\r\nimport lumber3 from \"../img/lumber3.jpg\";\r\nimport ChooseItem from \"./ChooseItem\";\r\n\r\nexport default function Choose({setWorkwidth, setAllwidth, allwidth, workwidth }) {\r\n  let [selected, setSelected] = useState('');\r\n  let [firstChoose, setFirstChoose] = useState(true);\r\n\r\n  let [refs, ] = useState([\r\n    useRef('lumber1'),\r\n    useRef('lumber2'),\r\n    useRef('lumber3')\r\n  ]);\r\n\r\n\r\n  //handler when select lumber - set new selected state\r\n  let selection = (e) =>{\r\n    setFirstChoose(false);\r\n    if(e.target.value!==selected){\r\n      setSelected(e.target.value);\r\n      setWorkwidth('');  //reset widths\r\n      setAllwidth('');\r\n    }\r\n  };\r\n\r\n  return (<React.Fragment>\r\n    <p className='choose-type'>Выберите тип материала:</p>\r\n    <div className=\"choose\">\r\n      <ChooseItem selected={selected}\r\n                  allwidth={allwidth}\r\n                  workwidth={workwidth}\r\n                  selection={selection}\r\n                  firstChoose={firstChoose}\r\n                  setWorkwidth={setWorkwidth}\r\n                  lumber={lumber1}\r\n                  refs={refs[0]}\r\n                  allrefs={refs}\r\n                  lumberName={'lumber1'}\r\n                  name={'Вагонка'}\r\n                  setAllwidth={setAllwidth}\r\n                  setSelected={setSelected}\r\n                  setFirstChoose={setFirstChoose}/>\r\n      <ChooseItem selected={selected}\r\n                  allwidth={allwidth}\r\n                  workwidth={workwidth}\r\n                  selection={selection}\r\n                  firstChoose={firstChoose}\r\n                  setWorkwidth={setWorkwidth}\r\n                  lumber={lumber2}\r\n                  refs={refs[1]}\r\n                  allrefs={refs}\r\n                  lumberName={'lumber2'}\r\n                  name={'Половая доска'}\r\n                  setSelected={setSelected}\r\n                  setFirstChoose={setFirstChoose}\r\n                  setAllwidth={setAllwidth}/>\r\n      <ChooseItem selected={selected}\r\n                  allwidth={allwidth}\r\n                  workwidth={workwidth}\r\n                  selection={selection}\r\n                  firstChoose={firstChoose}\r\n                  setWorkwidth={setWorkwidth}\r\n                  lumber={lumber3}\r\n                  refs={refs[2]}\r\n                  allrefs={refs}\r\n                  lumberName={'lumber3'}\r\n                  name={'Планкен'}\r\n                  setSelected={setSelected}\r\n                  setFirstChoose={setFirstChoose}\r\n                  setAllwidth={setAllwidth}/>\r\n    </div>\r\n  </React.Fragment>)\r\n}","import React, { useState } from \"react\";\r\n\r\n\r\nexport default function Result({area,allwidth,workwidth}) {\r\n\r\n  let [length, setLength] = useState('');\r\n  let [plus5, setPlus5] = useState(1);\r\n  let increasing;\r\n  //how much elements as result need to order\r\n  let elements;\r\n  //if not set whether of widths\r\n  if(!allwidth || !workwidth){\r\n    elements = 0;\r\n    increasing = 1;\r\n  }\r\n  else{\r\n    increasing = allwidth/workwidth;\r\n    if(!length){\r\n      elements = 0;\r\n    }\r\n    else{\r\n      elements = Math.ceil(area*1000*plus5/(workwidth*length));\r\n    }\r\n  }\r\n\r\n  let orderArea = (area*increasing*plus5).toFixed(1); //real area to order after increasing\r\n\r\n  return <div className='result'>\r\n    <h3>{'Ваш заказ составляет: ' + orderArea + ' м2'}</h3>\r\n    <label>\r\n      <p>Введите длину:</p>\r\n      <input  type=\"text\"\r\n              disabled={!area>0}\r\n              placeholder='0'\r\n              value={length}\r\n              onChange={(e)=>{\r\n                setLength(e.target.value.replace(/,/,'.'));    //delete Nulls in the beginning of number\r\n              }}/>\r\n      <p>м</p>\r\n    </label>\r\n    <label  className='plus5'>\r\n      <input className='checkbox'\r\n             type=\"checkbox\"\r\n             disabled={!area>0}\r\n             onClick={(e)=>{\r\n        e.target.checked?setPlus5(1.05):setPlus5(1);\r\n      }}/>\r\n      <p className='also-input'>С запасом 5%</p>\r\n    </label>\r\n    <h3>{'Количество необходимых элементов: ' + elements + ' шт'}</h3>\r\n  </div>\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default function Footer() {\r\n  return(\r\n      <div className='footer'>\r\n        <p>Develeoped by <a href=\"https://www.linkedin.com/in/yury-misiyevich\">Yury Misiyevich</a></p>\r\n        <p><a href=\"mailto:misiyevich@gmail.com\" type='email'>Contact me</a></p>\r\n      </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Choose from './Components/Choose';\r\nimport Result from './Components/Result';\r\nimport Footer from './Components/Footer';\r\n\r\nfunction App() {\r\n  let [theme, setTheme] = useState('light');\r\n  let [area, setArea] = useState('');\r\n  let [allwidth, setAllwidth] = useState('');\r\n  let [workwidth, setWorkwidth] = useState('');\r\n  return (\r\n    <div className={'App '+theme}>\r\n      <header className=\"App-header\">\r\n        <div className=\"head\">\r\n          <h1>Калькулятор отделочного пиломатериала</h1>\r\n          <label className=\"switch\">\r\n            <input type=\"checkbox\"\r\n                   onChange={()=>{\r\n                     if(theme === 'light'){\r\n                       setTheme('dark');\r\n                     }\r\n                     else{\r\n                       setTheme('light');\r\n                     }\r\n                   }}/>\r\n            <span className=\"slider round\"/>\r\n            <p className='theme'>{theme + ' theme'}</p>\r\n          </label>\r\n        </div>\r\n        <div className=\"area-label\">\r\n          <p>Введите площадь вашей поверхности:</p>\r\n          <input className=\"area-input\"\r\n                 placeholder='0'\r\n                 type=\"text\"\r\n                 value={area}\r\n                 onChange={e=>{\r\n                   if(+e.target.value){\r\n                     setArea(e.target.value.replace(/,/,'.'));\r\n                   }\r\n                   else{\r\n                     setArea('');\r\n                   }\r\n          }}/>\r\n        </div>\r\n      </header>\r\n      <Choose setWorkwidth={setWorkwidth}\r\n              setAllwidth={setAllwidth}\r\n              allwidth = {allwidth}\r\n              workwidth={workwidth}/>\r\n      <Result area = {area}\r\n              allwidth = {allwidth}\r\n              workwidth={workwidth}/>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}